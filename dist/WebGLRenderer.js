"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//A renderer that uses a context
var WebGLRenderer = function () {
	function WebGLRenderer(context, shaders) {
		_classCallCheck(this, WebGLRenderer);

		//Context refrence
		this.context = context;
		this.gl = this.context.gl;
		this.scene = [];

		//Shader
		this.shaders = shaders;
		this.shaderProgram = null;

		//Perspective matrix and model view
		this.horizAspect = this.context.getWidth() / this.context.getHeight();
		this.mvMatrix = null;
		this.mvMatrixStack = [];
		this.perspectiveMatrix = null;

		//Shader and model information
		this.attributes = {
			vertexPositionAttribute: null,
			vertexColorAttribute: null
		};

		this.scene = [];

		this.init();
	}

	_createClass(WebGLRenderer, [{
		key: "init",
		value: function init() {
			this.gl.clearColor(0.0, 0.0, 0.0, 1.0);
			this.gl.enable(this.gl.DEPTH_TEST);
			this.gl.depthFunc(this.gl.LEQUAL);
			this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
			this.gl.viewport(0, 0, this.context.canvas.width, this.context.canvas.height);

			this.initShaders(this.createShader(this.shaders.fragment, "fragment"), this.createShader(this.shaders.vertex, "vertex"));
		}
	}, {
		key: "createShader",
		value: function createShader(shaderSource, shaderType) {

			var type;

			if (shaderType == "vertex") type = this.gl.VERTEX_SHADER;
			if (shaderType == "fragment") type = this.gl.FRAGMENT_SHADER;

			var shader = this.gl.createShader(type);

			this.gl.shaderSource(shader, shaderSource);
			this.gl.compileShader(shader);

			if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
				alert("An error occurred compiling the shaders: " + this.gl.getShaderInfoLog(shader));
				this.gl.deleteShader(shader);
				return null;
			}

			return shader;
		}
	}, {
		key: "createBox",
		value: function createBox(x, y, width, height) {
			var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [1.0, 1.0, 1.0, 1.0];


			//Vertex buffer
			var vBuffer = this.gl.createBuffer();
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vBuffer);

			var x0 = x - width / 2,
			    x1 = x + width / 2,
			    y0 = y - height / 2,
			    y1 = y + height / 2;

			var vertices = [x1, y1, 0.0, x0, y1, 0.0, x1, y0, 0.0, x0, y0, 0.0];

			this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertices), this.gl.STATIC_DRAW);

			//Color buffer
			var colors = [color[0], color[1], color[2], color[3], color[0], color[1], color[2], color[3], color[0], color[1], color[2], color[3], color[0], color[1], color[2], color[3]];

			var cBuffer = this.gl.createBuffer();
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER, cBuffer);
			this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(colors), this.gl.STATIC_DRAW);

			this.scene.push({
				vBuffer: vBuffer,
				cBuffer: cBuffer,
				rotation: 0,
				x: x,
				y: y,
				width: width,
				height: height
			});

			return this.scene[this.scene.length - 1];
		}
	}, {
		key: "createLine",
		value: function createLine(x0, y0, x1, y1) {
			var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [1.0, 1.0, 1.0, 1.0];


			var dx = x1 - x0,
			    dy = y1 - y0;

			var width = Math.abs(dx),
			    height = Math.abs(dy);

			var d = Math.sqrt(dx * dx + dy * dy);

			var line = this.createBox(x0 + dx / 2, y0 + dy / 2, d, 0.025, color);
			line.rotation = Math.atan(dy / dx) * (180 / Math.PI);
		}
	}, {
		key: "initShaders",
		value: function initShaders(fragmentShader, vertexShader) {

			//Create shader program
			this.shaderProgram = this.gl.createProgram();

			//Attach shader components
			this.gl.attachShader(this.shaderProgram, vertexShader);
			this.gl.attachShader(this.shaderProgram, fragmentShader);

			//Compile and link shaders to context
			this.gl.linkProgram(this.shaderProgram);
			this.gl.useProgram(this.shaderProgram);

			//Locate attributes
			this.attributes.vertexPositionAttribute = this.gl.getAttribLocation(this.shaderProgram, "aVertexPosition");
			this.gl.enableVertexAttribArray(this.attributes.vertexPositionAttribute);

			this.attributes.vertexColorAttribute = this.gl.getAttribLocation(this.shaderProgram, "aVertexColor");
			this.gl.enableVertexAttribArray(this.attributes.vertexColorAttribute);
		}
	}, {
		key: "render",
		value: function render() {

			this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);

			this.perspectiveMatrix = makePerspective(45, this.horizAspect, 0.1, 100.0);

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = this.scene[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var object = _step.value;


					//Translate  model
					this.loadIdentity();
					this.mvTranslate([object.x, object.y, -20.0]);

					//Rotate
					this.mvRotate(object.rotation, [0, 0, 1]);
					this.mvTranslate([-object.x, -object.y, 0]);
					this.mvPushMatrix();

					//Bind vertices
					this.gl.bindBuffer(this.gl.ARRAY_BUFFER, object.vBuffer);

					this.gl.vertexAttribPointer(this.attributes.vertexPositionAttribute, 3, this.gl.FLOAT, false, 0, 0);

					//Bind colors
					this.gl.bindBuffer(this.gl.ARRAY_BUFFER, object.cBuffer);
					this.gl.vertexAttribPointer(this.attributes.vertexColorAttribute, 4, this.gl.FLOAT, false, 0, 0);

					//Render buffers
					this.setMatrixUniforms();
					this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);

					this.mvPopMatrix();
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		}
	}, {
		key: "mvPushMatrix",
		value: function mvPushMatrix(m) {
			if (m) {
				this.mvMatrixStack.push(m.dup());
				this.mvMatrix = m.dup();
			} else {
				this.mvMatrixStack.push(this.mvMatrix.dup());
			}
		}
	}, {
		key: "mvPopMatrix",
		value: function mvPopMatrix() {
			if (!this.mvMatrixStack.length) {
				throw "Can't pop from an empty matrix stack.";
			}

			this.mvMatrix = this.mvMatrixStack.pop();
			return this.mvMatrix;
		}
	}, {
		key: "mvRotate",
		value: function mvRotate(angle, v) {
			var inRadians = angle * Math.PI / 180.0;

			var m = Matrix.Rotation(inRadians, $V([v[0], v[1], v[2]])).ensure4x4();
			this.multMatrix(m);
		}
	}, {
		key: "loadIdentity",
		value: function loadIdentity() {
			this.mvMatrix = Matrix.I(4);
		}
	}, {
		key: "multMatrix",
		value: function multMatrix(m) {
			this.mvMatrix = this.mvMatrix.x(m);
		}
	}, {
		key: "mvTranslate",
		value: function mvTranslate(v) {
			this.multMatrix(Matrix.Translation($V([v[0], v[1], v[2]])).ensure4x4());
		}
	}, {
		key: "setMatrixUniforms",
		value: function setMatrixUniforms() {
			var pUniform = this.gl.getUniformLocation(this.shaderProgram, "uPMatrix");
			this.gl.uniformMatrix4fv(pUniform, false, new Float32Array(this.perspectiveMatrix.flatten()));

			var mvUniform = this.gl.getUniformLocation(this.shaderProgram, "uMVMatrix");
			this.gl.uniformMatrix4fv(mvUniform, false, new Float32Array(this.mvMatrix.flatten()));
		}
	}]);

	return WebGLRenderer;
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
